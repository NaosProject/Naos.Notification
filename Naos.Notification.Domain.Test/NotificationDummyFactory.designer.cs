// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.169.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Notification.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::Naos.Notification.Domain;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Type;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.169.0")]
#if !NaosNotificationSolution
    internal
#else
    public
#endif
    abstract class DefaultNotificationDummyFactory : IDummyFactory
    {
        public DefaultNotificationDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(CouldNotSendOnAnyPreparedChannelEvent),
                        typeof(SentOnAllPreparedChannelsEvent),
                        typeof(SentOnSomePreparedChannelsEvent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (AttemptToSendNotificationEventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new AttemptToSendNotificationResult(
                                 A.Dummy<IReadOnlyDictionary<IDeliveryChannel, IReadOnlyCollection<ChannelOperationOutcomeInfo>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(EveryoneAudience),
                        typeof(VoidAudience)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (AudienceBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new AudienceOptedOutOfAllChannelsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>(),
                                 A.Dummy<GetDeliveryChannelConfigsResult>(),
                                 A.Dummy<PrepareToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(AudienceVoidNotification)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (AudienceSpecifiedNotificationBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new AudienceVoidNotification(
                                 A.Dummy<IAudience>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new BuildTagsOp<AudienceOptedOutOfAllChannelsEvent>(
                                 A.Dummy<long>(),
                                 A.Dummy<AudienceOptedOutOfAllChannelsEvent>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChannelOperationInstruction(
                                 A.Dummy<IOperation>(),
                                 A.Dummy<ChannelOperationMonitoringInfo>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChannelOperationMonitoringInfo(
                                 A.Dummy<long>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<TypeRepresentation>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChannelOperationOutcomeInfo(
                                 A.Dummy<long>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<ChannelOperationOutcome>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CouldNotGetOrUseAudienceEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CouldNotGetOrUseDeliveryChannelConfigsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>(),
                                 A.Dummy<GetDeliveryChannelConfigsResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CouldNotPrepareToSendOnAnyChannelEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>(),
                                 A.Dummy<GetDeliveryChannelConfigsResult>(),
                                 A.Dummy<PrepareToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CouldNotSendOnAnyPreparedChannelEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<AttemptToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(EmailDeliveryChannel),
                        typeof(SlackDeliveryChannel)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (DeliveryChannelBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DeliveryChannelConfig(
                                 A.Dummy<IDeliveryChannel>(),
                                 A.Dummy<DeliveryChannelAction>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EmailDeliveryChannel());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EveryoneAudience());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExceptionThrownFailure(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(ExceptionThrownFailure)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (FailureBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new File(
                                 A.Dummy<byte[]>(),
                                 A.Dummy<string>(),
                                 A.Dummy<FileFormat>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAudienceOp(
                                 A.Dummy<INotification>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAudienceResult(
                                 A.Dummy<IAudience>(),
                                 A.Dummy<IReadOnlyCollection<IFailure>>(),
                                 A.Dummy<FailureAction>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetDeliveryChannelConfigsOp(
                                 A.Dummy<INotification>(),
                                 A.Dummy<IAudience>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetDeliveryChannelConfigsResult(
                                 A.Dummy<IReadOnlyCollection<DeliveryChannelConfig>>(),
                                 A.Dummy<IReadOnlyCollection<IFailure>>(),
                                 A.Dummy<FailureAction>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(AudienceVoidNotification),
                        typeof(VoidNotification)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (NotificationBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(AudienceOptedOutOfAllChannelsEvent),
                        typeof(CouldNotGetOrUseAudienceEvent),
                        typeof(CouldNotGetOrUseDeliveryChannelConfigsEvent),
                        typeof(CouldNotPrepareToSendOnAnyChannelEvent),
                        typeof(CouldNotSendOnAnyPreparedChannelEvent),
                        typeof(PreparedToSendOnAllChannelsEvent),
                        typeof(PreparedToSendOnSomeChannelsEvent),
                        typeof(SendNotificationRequestedEvent),
                        typeof(SentOnAllPreparedChannelsEvent),
                        typeof(SentOnSomePreparedChannelsEvent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (NotificationEventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NotificationTrackingCode(
                                 A.Dummy<long>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PreparedToSendOnAllChannelsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>(),
                                 A.Dummy<GetDeliveryChannelConfigsResult>(),
                                 A.Dummy<PrepareToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PreparedToSendOnSomeChannelsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<GetAudienceResult>(),
                                 A.Dummy<GetDeliveryChannelConfigsResult>(),
                                 A.Dummy<PrepareToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(AudienceOptedOutOfAllChannelsEvent),
                        typeof(CouldNotPrepareToSendOnAnyChannelEvent),
                        typeof(PreparedToSendOnAllChannelsEvent),
                        typeof(PreparedToSendOnSomeChannelsEvent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (PrepareToSendNotificationEventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PrepareToSendNotificationResult(
                                 A.Dummy<IReadOnlyDictionary<IDeliveryChannel, PrepareToSendOnChannelResult>>(),
                                 A.Dummy<CannotPrepareToSendOnChannelAction>(),
                                 A.Dummy<IReadOnlyCollection<IDeliveryChannel>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PrepareToSendOnChannelOp(
                                 A.Dummy<INotification>(),
                                 A.Dummy<IAudience>(),
                                 A.Dummy<IDeliveryChannel>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PrepareToSendOnChannelResult(
                                 A.Dummy<IReadOnlyList<ChannelOperationInstruction>>(),
                                 A.Dummy<IReadOnlyCollection<IFailure>>(),
                                 A.Dummy<PrepareToSendOnChannelFailureAction>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ProcessSendNotificationSagaOp(
                                 A.Dummy<long>(),
                                 A.Dummy<IReadOnlyDictionary<IDeliveryChannel, IReadOnlyList<ChannelOperationMonitoringInfo>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendNotificationOp(
                                 A.Dummy<INotification>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SendNotificationRequestedEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<SendNotificationOp>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SentOnAllPreparedChannelsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<AttemptToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SentOnSomePreparedChannelsEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<DateTime>(),
                                 A.Dummy<AttemptToSendNotificationResult>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SlackDeliveryChannel());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new VoidAudience());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new VoidNotification());
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}